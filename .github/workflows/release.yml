name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # Windows 构建
  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest
          
      - name: Install Dependencies
        run: pnpm install
        
      - name: Build Electron App
        run: pnpm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build Windows Package
        run: pnpm run build:win
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: List Build Output
        run: dir dist
        shell: cmd
          
      - name: Upload Windows Artifacts
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/*.exe
            dist/latest*.yml
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: false

  # macOS 构建
  build-macos:
    name: Build for macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest
          
      - name: Install Dependencies
        run: pnpm install
        
      - name: Build Electron App
        run: pnpm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build macOS Package
        run: pnpm run build:mac
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: List Build Output
        run: ls -la dist
          
      - name: Upload macOS Artifacts
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/*.dmg
            dist/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: false

  # Linux 构建
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest
          
      # 安装 Snapcraft
      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v2
        with:
          snapcraft_token: ${{ secrets.SNAPCRAFT_TOKEN }}
      
      # 更新 Linux 依赖安装
      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            webkit2gtk-4.0 \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            fakeroot \
            dpkg \
            rpm
          
      - name: Install Dependencies
        run: |
          pnpm install
          # 确保 app-builder 有执行权限
          chmod +x node_modules/.pnpm/app-builder-bin@*/node_modules/app-builder-bin/linux/x64/app-builder
        
      - name: Build Electron App
        run: pnpm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build Linux Package
        run: |
          # 设置临时目录权限
          sudo chmod -R 777 /tmp
          pnpm run build:linux
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}
          
      # 新增：上传到 Snap Store
      - name: Publish to Snap Store
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          for snap in dist/*.snap; do
            if [ -f "$snap" ]; then
              snapcraft upload "$snap" --release stable
            fi
          done
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}
        continue-on-error: true
      
      - name: List Build Output
        run: |
          ls -la dist
          # 显示更详细的错误信息（如果有）
          find dist -type f -exec file {} \;
          
      - name: Upload Linux Artifacts
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: false

  # 创建 Release
  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          CHANGES=$(awk -v ver="$VERSION" '/^## \[?'$VERSION'\]?/ {p=1;print;next} /^## \[?[0-9]+\.[0-9]+\.[0-9]+/ {p=0} p' CHANGELOG.md || echo "")
          if [ -z "$CHANGES" ]; then
            CHANGES=$(git log -1 --pretty=format:"%B")
          fi
          echo "CHANGES<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Update Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Release ${{ github.ref_name }}
          body: ${{ steps.release_notes.outputs.CHANGES }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }} 